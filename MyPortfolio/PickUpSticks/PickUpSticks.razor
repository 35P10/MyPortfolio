@page "/PickUpSticks"
@using MyPortfolio.PickUpSticks.Components;
<div style="position:relative; background-color:azure; width: 100%; height: 100%;">

	@if (gameStatus == 0)
	{
		<p>juega p.</p>	
		<h3>PickUpSticks</h3>
		@for(int i = 0; i < NumberOfSticks; i++ )
		{
			int index = i;
			<Stick Length=20 Width=500 Orientation=@GetRandomBool() StartX=@random.Next(10, 1000) StartY=@random.Next(10, 1000) ZIndex=@i Color=@GetRandomColor() @ref="ComponentRef" HandleOverlapping="() => checkOverlapping(index)" />
		}
	} 
	else if (gameStatus == 1)
	{
		<p>nice</p>
	}
	else
	{
		<p>gameover</p>
	}


</div>
@code {
	Random random = new Random();
	public int NumberOfSticks = 20;
	private int gameStatus = 0;

	List<Stick> ComponentRefs = new List<Stick>();
	Stick ComponentRef
	{
		set { ComponentRefs.Add(value); }
	}

	protected override void OnInitialized()
	{
		Random random = new Random();
	}

	private bool GetRandomBool()
	{
		return random.Next(0, 2) == 0;
	}

	private string GetRandomColor()
	{
		return random.Next(1, 7) switch
		{
			1 => "#06FBFD", //cyan
			2 => "#FB0206",	// red
			3 => "#FF01FD", // pink
			4 => "#0400F7", // blue
			5 => "#05FC06", // green
			6 => "#FFFE04", // yellow
			_ => "#FFF"
		};
	}

	public bool checkOverlapping(int one)
	{
		for (int i = ComponentRefs[one].ZIndex + 1; i < NumberOfSticks; i++)
		{
			if (ComponentRefs[i].enable == true && ComponentRefs[one].IsOverlapping(ComponentRefs[i]) == true)
			{
				gameStatus = 2;
				StateHasChanged();
				return true;
			}
		}
		ComponentRefs[one].enable = false;
		if (--NumberOfSticks == 0)
		{
		gameStatus = 1;
			StateHasChanged();
		}
		return false;
	}

}
